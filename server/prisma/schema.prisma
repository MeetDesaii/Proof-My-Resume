// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String?
  name          String?
  emailVerified Boolean  @default(false)
  verifyToken   String?  @unique
  resetToken    String?  @unique
  image         String?
  provider      Provider @default(EMAIL)
  providerId    String?

  resumes         Resume[]
  jobApplications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([verifyToken])
}

enum Provider {
  EMAIL
  GOOGLE
}

model Resume {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fileName      String
  fileUrl       String
  parsedContent Json?
  skills        String[]
  experience    Json[]
  education     Json[]

  tailoredVersions TailoredResume[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model JobApplication {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  jobTitle       String
  company        String
  jobDescription String  @db.Text
  jobUrl         String?

  atsScore        Float?
  missingKeywords String[]
  matchedKeywords String[]
  suggestions     Json?

  tailoredResume TailoredResume?

  status ApplicationStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, status])
}

enum ApplicationStatus {
  DRAFT
  TAILORED
  APPLIED
  INTERVIEW
  REJECTED
  ACCEPTED
}

model TailoredResume {
  id       String @id @default(cuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  applicationId String         @unique
  application   JobApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  content            Json
  highlightedChanges Json
  improvementScore   Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([resumeId])
}
